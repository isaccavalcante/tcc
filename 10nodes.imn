node n1 {
    type router
    model PC
    network-config {
	hostname n2
	!
	interface eth0
	 ip address 192.168.0.21/24
	!
    }
    canvas c1
    iconcoords {72.0 314.0}
    labelcoords {72.0 346.0}
    interface-peer {eth0 n12}
}

node n2 {
    type router
    model PC
    network-config {
	hostname n4
	!
	interface eth0
	 ip address 192.168.0.23/24
	!
    }
    canvas c1
    iconcoords {80.0 502.0}
    labelcoords {80.0 534.0}
    interface-peer {eth0 n12}
}

node n3 {
    type router
    model PC
    network-config {
	hostname n3
	!
	interface eth0
	 ip address 192.168.0.22/24
	!
    }
    canvas c1
    iconcoords {73.0 410.0}
    labelcoords {73.0 442.0}
    interface-peer {eth0 n12}
}

node n4 {
    type router
    model PC
    network-config {
	hostname n5
	!
	interface eth0
	 ip address 192.168.0.24/24
	!
    }
    canvas c1
    iconcoords {261.0 510.0}
    labelcoords {261.0 542.0}
    interface-peer {eth0 n12}
}

node n5 {
    type router
    model PC
    network-config {
	hostname n6
	!
	interface eth0
	 ip address 192.168.0.25/24
	!
    }
    canvas c1
    iconcoords {416.0 509.0}
    labelcoords {416.0 541.0}
    interface-peer {eth0 n12}
}

node n6 {
    type router
    model PC
    network-config {
	hostname n7
	!
	interface eth0
	 ip address 192.168.0.26/24
	!
    }
    canvas c1
    iconcoords {566.0 510.0}
    labelcoords {566.0 542.0}
    interface-peer {eth0 n12}
}

node n7 {
    type router
    model PC
    network-config {
	hostname n8
	!
	interface eth0
	 ip address 192.168.0.27/24
	!
    }
    canvas c1
    iconcoords {697.0 503.0}
    labelcoords {697.0 535.0}
    interface-peer {eth0 n12}
}

node n8 {
    type router
    model PC
    network-config {
	hostname n9
	!
	interface eth0
	 ip address 192.168.0.28/24
	!
    }
    canvas c1
    iconcoords {688.0 406.0}
    labelcoords {688.0 438.0}
    interface-peer {eth0 n12}
}

node n9 {
    type router
    model PC
    network-config {
	hostname n10
	!
	interface eth0
	 ip address 192.168.0.29/24
	!
    }
    canvas c1
    iconcoords {694.0 313.0}
    labelcoords {694.0 345.0}
    interface-peer {eth0 n12}
}

node n10 {
    type router
    model PC
    network-config {
	hostname a1
	!
	interface eth0
	 ip address 192.168.0.30/24
	!
    }
    canvas c1
    iconcoords {684.0 192.0}
    labelcoords {684.0 224.0}
    interface-peer {eth0 n12}
}

node n11 {
    type router
    model router
    network-config {
	hostname r1
	!
	interface eth1
	 ip address 192.168.1.1/24
	 ipn6 address :0::1/64
	!
	interface eth0
	 ip address 192.168.0.1/24
	!
    }
    canvas c1
    iconcoords {417.0 104.0}
    labelcoords {417.0 136.0}
    interface-peer {eth0 n12}
    custom-config {
	custom-config-id service:DHCPClient
	custom-command DHCPClient
	config {
	files=('startdhcpclient.sh', )
	}
    }
    custom-config {
	custom-config-id service:DHCPClient:startdhcpclient.sh
	custom-command startdhcpclient.sh
	config {
	#!/bin/sh
	# auto-generated by DHCPClient service (utility.py)
	# uncomment this mkdir line and symlink line to enable client-side DNS
	# resolution based on the DHCP server response.
	mkdir -p /var/run/resolvconf/interface
	#ln -s /var/run/resolvconf/interface/eth0.dhclient /var/run/resolvconf/resolv.conf
	#/sbin/dhclient -nw -pf /var/run/dhclient-eth0.pid -lf /var/run/dhclient-eth0.lease eth0
	ln -s /var/run/resolvconf/interface/eth1.dhclient /var/run/resolvconf/resolv.conf
	/sbin/dhclient -nw -pf /var/run/dhclient-eth1.pid -lf /var/run/dhclient-eth1.lease eth1
	
	}
    }
    custom-config {
	custom-config-id service:Firewall
	custom-command Firewall
	config {
	files=('firewall.sh', )
	startidx=0
	starttime=1
	}
    }
    custom-config {
	custom-config-id service:Firewall:firewall.sh
	custom-command firewall.sh
	config {
	#!/bin/sh
	# custom node firewall rules for service (security.py)
	# -------- CUSTOMIZATION REQUIRED --------
	#
	# Below are sample iptables firewall rules that you can uncomment and edit.
	# You can also use ip6tables rules for IPn6.
	#
	
	# start by flushing all firewall rules (so this script may be re-run)
	iptables -F
	
	# CUSTOM RULE allow outcoming traffic from LAN to WAN
	iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o eth1 -j MASQUERADE 
	
	# allow traffic related to established connections 
	iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
	
	# allow TCP packets from any source destined for 192.168.1.1
	#iptables -A INPUT -s 0/0 -i eth0 -d 192.168.1.1  -p TCP -j ACCEPT
	
	# allow OpenVPN server traffic from eth0
	#iptables -A INPUT -p udp --dport 1194 -j ACCEPT
	#iptables -A INPUT -i eth0 -j DROP
	#iptables -A OUTPUT -p udp --sport 1194 -j ACCEPT
	#iptables -A OUTPUT -o eth0 -j DROP
	
	# allow ICMP ping traffic
	#iptables -A OUTPUT -p icmp --icmp-type echo-request -j ACCEPT
	#iptables -A INPUT  -p icmp --icmp-type echo-reply   -j ACCEPT
	
	# allow SSH traffic
	#iptables -A -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT
	
	# drop all other traffic coming in eth0
	#iptables -A INPUT -i eth0 -j DROP
	
	}
    }
    services {zebra OSPFn2 OSPFn3 vtysh IPForward DHCPClient Firewall}
    interface-peer {eth1 n14}
}

node n12 {
    type lanswitch
    network-config {
	hostname s1
	!
    }
    canvas c1
    iconcoords {416.0 294.0}
    labelcoords {416.0 318.0}
    interface-peer {e0 n1}
    interface-peer {e1 n2}
    interface-peer {e2 n3}
    interface-peer {e3 n4}
    interface-peer {e4 n5}
    interface-peer {e5 n6}
    interface-peer {e6 n7}
    interface-peer {e7 n8}
    interface-peer {e8 n9}
    interface-peer {e9 n10}
    interface-peer {e10 n11}
    interface-peer {e11 n13}
}

node n13 {
    type router
    model PC
    network-config {
	hostname n1
	!
	interface eth0
	 ip address 192.168.0.20/24
	!
    }
    canvas c1
    iconcoords {69.0 215.0}
    labelcoords {69.0 247.0}
    interface-peer {eth0 n12}
}

node n14 {
    type router
    model host
    network-config {
	hostname w1
	!
	interface eth0
	 ip address 192.168.1.10/24
	!
    }
    canvas c1
    iconcoords {677.0 94.0}
    labelcoords {677.0 126.0}
    interface-peer {eth0 n11}
    services {DefaultRoute SSH}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	startidx=0
	starttime=1
	}
    }
}

link l1 {
    delay 50000
    color Green
    nodes {n1 n12}
    bandwidth 512000
}

link l2 {
    delay 50000
    color Green
    nodes {n2 n12}
    bandwidth 512000
}

link l3 {
    delay 50000
    color Green
    nodes {n3 n12}
    bandwidth 512000
}

link l4 {
    delay 50000
    color Green
    nodes {n4 n12}
    bandwidth 512000
}

link l5 {
    delay 50000
    color Green
    nodes {n5 n12}
    bandwidth 512000
}

link l6 {
    delay 50000
    color Green
    nodes {n6 n12}
    bandwidth 512000
}

link l7 {
    delay 50000
    color Green
    nodes {n7 n12}
    bandwidth 512000
}

link l8 {
    delay 50000
    color Green
    nodes {n8 n12}
    bandwidth 512000
}

link l9 {
    delay 50000
    color Green
    nodes {n9 n12}
    bandwidth 512000
}

link l10 {
    delay 50000
    color Green
    nodes {n10 n12}
    bandwidth 512000
}

link l11 {
    delay 50000
    color Green
    nodes {n11 n12}
    bandwidth 512000
}

link l12 {
    delay 50000
    color Green
    nodes {n13 n12}
    bandwidth 512000
}

link l13 {
    delay 50000
    color Green
    nodes {n11 n14}
    bandwidth 512000
}

canvas c1 {
    name {Canvas1}
}

option global {
    interface_names no
    ip_addresses yes
    ipn6_addresses yes
    node_labels yes
    link_labels yes
    show_api no
    background_images no
    annotations yes
    grid yes
    traffic_start 0
}

option session {
}

